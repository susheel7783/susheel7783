
A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:



class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int start=0,end=nums.size()-1,mid;
        
        while(start<end){
         mid=(start+end)/2;
            if(nums[mid]<nums[mid+1])//then peak will be on right side of mid 
                start=mid+1;  // the no will increase until the number reach to the end
            else
                end=mid;  // and then last element will be  a peak  or at some point when  a no get smaller have a peak
        }
        return start;
        }
};
