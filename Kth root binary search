#include<iostream>
using namespace std;
#include<algorithm>
#include<math.h>
#define ll long long int

bool isvalid(int mid,ll n,int k){

//check whether the condition mid^k<=n is being satisfied
bool isValid(long long int mid,long long int K,long long int N){
	long long int val=1;
	// calculate mid^K
	for(int i=1; i<=K; i++){
		val *= mid;

	ll val=1;
	for(int i=1;i<=k;i++)
	{
		val*=mid;
		if(val>N){
			return false;
		}
	}

	return val<=N;
}


	//We have got x^k.....
	if(val>n){
		return false;
//calculate greatest value of x such that X^k<=n
long long int kthRoot(long long int N,long long int K){
	if(K==1){
		return N;
	}
	return true;
}

//i have to find an integer x such that x^k is equals to n
void kthroot(ll n,int k)
{
    if(k==1) 
		{
			cout<<n<<endl;
			return;
		}
		//return n; 

	int s = 1;
	int e = 1e8;					
	long long int ans, start=1, end=1e8;

	int ans = -1;
	while(s<=e){
	bool valid;

		int mid = (s+e)/2;
	while(start <= end){

		long long int mid = start + (end-start)/2;

		bool temp = isvalid(mid,n,k);		

		if(temp){
			ans = mid;
			s = mid+1;
		}else
			e = mid-1;
		valid = isValid(mid, K, N);


		if(valid){
			ans=mid;
			start=mid+1;
		}
		else{
			end=mid-1;
		}
	}
	cout<<ans<<endl;
	return ans;
}
int main() {
    int t;cin>>t;
    while(t--)
    {
        long long int n;cin>>n;
        int k;

		cin>>k;
        kthroot(n,k);

    }
    return 0;

	int t;
	cin >> t;
	while(t--){
		long long int N;
		long int K;
		cin >> N >> K;

		long long int ans = kthRoot(N,K);
		cout<<ans<<endl;
	}
	return 0;
} 
