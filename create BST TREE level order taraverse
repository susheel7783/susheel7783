#include<iostream>
#include<queue>
using namespace std;
// 8 10 1 -1 -1 6 4 -1 -1 7 -1 -1 3 -1 4 13 -1 -1 -1
class node{
public:
	int data;
	node*left;
	node*right;
	node(int d){
		data=d;
		left=NULL;
		right=NULL;
	}
};
node*ct(){
	node*root=NULL;
	int data;
	cin>>data;
	
	if(data==-1){
	return root;
}
root=new node(data);

root->left=ct();
root->right=ct();
}

void preo(node*root){
	if(root==NULL){
		return;
	}
	 cout<<root->data<<" ";
	 preo(root->left);
 preo(root->right);
}

int count(node*root){
	if(root==NULL){
		return 0;
	}
	return count(root->left)+count(root->right)+1;

}
int height(node*root){
	if(root==NULL){
		return 0;
	}
	return max(height(root->left),height(root->right))+1;
}
int dia(node*root){
	if(root==NULL){
		return 0;
	}
	int d1=height(root->left)+height(root->right);
	int d2=height(root->left);
	int d3=height(root->right);
	return max(d1,(max(d2,d3)));
}
node*search(node*root,int d){
	if(root==NULL){
		return NULL;
	}
if(root->data==d){
	return root;
}
node*left= search(root->left,d);
if(left)
return left;
else{
node*right=search(root->right,d);
return right;
}
}
void mirror(node*root){
	if(root==NULL){
		return;
	}
swap(root->right,root->left);
mirror(root->left);
mirror(root->right);
}
void levelOrderTraversal(node* root){

    queue<node*> q;

    q.push(root);
    q.push(NULL);


    while(!q.empty()){

        auto p = q.front();
        q.pop();

        if(p!=NULL){

            cout<<p->data<<" ";
            if(p->left!=NULL){
                q.push(p->left);
            }
            if(p->right!=NULL)
                q.push(p->right);

        }else{ // address from the queue I have got is NULL

            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }

        }
    }

}

//create BST
node*insertInBST(node*root,int value){

	if(root==NULL){
		root=new node(value);
		return root;
	}
	if(root->data<value){
		root->right=insertInBST(root->right,value);
	}else{
		root->left=insertInBST(root->left,value);
	}
}
node*createBST(){
	node*root=NULL;
	int noOfNodes;
	cin>>noOfNodes;
	for( int i=0;i<noOfNodes;i++){
      int value;
      cin>>value;
      root=insertInBST(root,value);
	}
	return root;
}
int main(){
	
	// node*root=ct();
	// levelOrderTraversal(root);
	// mirror(root);
	// cout<<endl;
	// preo(root);
	// cout<<endl;
	// levelOTraverasal(root);
	// cout<<endl;
	// cout<<count(root);
	// cout<<endl;
	// cout<<height(root);
	// cout<<endl;
	// cout<<dia(root);
	// cout<<endl;
	// if(search(root,11)){
	// 	cout<<"present";
	// }
	// else{
	// 	cout<<"not present";
	// }
	node*root=createBST();
	levelOrderTraversal(root);

}
