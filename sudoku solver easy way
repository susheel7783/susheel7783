#include<bits/stdc++.h>
using namespace std;
bool canPlace(int mat[][9],int i,int j,int n,int number){
	//rows and colms check
for(int x=0;x<n;x++){
	if(mat[x][j]==number || mat[i][x]==number){
		return false;
	}
}
	//check that number is present in subgrid
	int rn=sqrt(n);
	int sx=(i/rn)*rn;
	int sy=(j/rn)*rn;
	for(int x=sx;x<sx+rn;x++){
		for(int y=sy;y<sy+rn;y++){
			if(mat[x][y]==number){
				return false;
			}
		}
	}
	return true;
}


bool sudokusolver(int mat[][9],int i,int j,int n){
	//base case
	if(i==n){
		//print mat
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				cout<<mat[i][j]<<" ";
			}
			cout<<endl;
		}
		return true;
	}
	//rec case
	//when row end
	if(j==n){
		return sudokusolver(mat,i+1,0,n);
	}
	//skip the prefilled cells  means next cell me move kare
	if(mat[i][j]!=0){
		return sudokusolver(mat,i,j+1,n);
	}
	//fill current cell
	for(int number=1;number<=9;number++){
		if(canPlace(mat,i,j,n,number)){
        mat[i][j]=number;
        bool kyaBakiHua=sudokusolver(mat,i,j+1,n);
        if(kyaBakiHua==true){
        	return true;
        }
		}
	}
	mat[i][j]=0;
	return false;
}
int main(){
	int mat[][9] = { {3, 0, 6, 5, 0, 8, 4, 0, 0}, 
         {5, 2, 0, 0, 0, 0, 0, 0, 0}, 
         {0, 8, 7, 0, 0, 0, 0, 3, 1}, 
         {0, 0, 3, 0, 1, 0, 0, 8, 0}, 
         {9, 0, 0, 8, 6, 3, 0, 0, 5}, 
         {0, 5, 0, 0, 9, 0, 6, 0, 0}, 
         {1, 3, 0, 0, 0, 0, 2, 5, 0}, 
         {0, 0, 0, 0, 0, 0, 0, 7, 4}, 
         {0, 0, 5, 2, 0, 6, 3, 0, 0} };
         sudokusolver(mat,0,0,9);

}
