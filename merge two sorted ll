// linked list 
#include <bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node*next;
    node(int d){
        data=d;
        next=NULL;
    }
};

int length(node*head){
    int i=0;
    while(head!=NULL){
        head=head->next;
        i++;
    }
    return i;
}
// insertAtStart
void insertAtStart(node*&head,node*&tail,int d){
    node*n=new node(d);
    if(head==NULL){
    head=n;
    tail=n;
    }
    else{
    n->next=head;
    head=n;
    }
}
// insertAtend
void insertAtend(node*&head,node*&tail,int d){
    node*n=new node(d);
    if(head==NULL){
        head=n;
        tail=n;
    }
    else{
        tail->next=n;
        n->next=NULL;
        tail=n;
    }
}
// 3 way to print output
void print(node*head){
    if(head==NULL){
        return;
    }
    while(head!=NULL){
        cout<<head->data<<"-->";
        head=head->next;
    }
    cout<<"NULL";
}
void insertAtMiddle(node*&head,node*&tail,int d,int pos){
    node*n=new node(d);
    if(pos<=0){
        insertAtStart(head,tail,d);
    }
    if(pos>=length(head)){
        insertAtend(head,tail,d);
    }
    else{
        node*temp=head;
        int i=0;
        while(i<pos-1){
            temp=temp->next;   // mujhe temp ko us position tak pahunchana bhi hai na 
            i++;               // jahan p new node insert karna hai
        }
        n->next=temp->next;
        temp->next=n;
    }
    }
//delete at front
void deleteAtStart(node*&head,node*&tail){
    if(head==NULL){
        return;
    }
    else if(head==tail){
        delete head;
        head=tail=NULL;
        return;
    }
    else{
        node*temp=head;
        //delete head;
        head=head->next;
        delete temp;
        
    }
}
//delete at end
void deleteAtEnd(node*&head,node*&tail){
    if(head==NULL){
        return;
    }
    else if(head==tail){
        delete head;
        head=tail=NULL;
        return;
    }
    else{
        node*temp=head;
        while(temp->next!=tail){
            temp=temp->next;
            
        }
        delete tail;
        temp->next=NULL;
        tail=temp;
       
    }
}
//
//delete at Middle
void deleteAtMiddle(node*&head,node*&tail,int pos){
    if(pos<=0){
        deleteAtStart(head,tail);
        return;
    }
    if(pos>=length(head)-1){
        deleteAtEnd(head,tail);  
        return;
    }
    else{
       
        node*temp=head;
       for(int i=0;i<pos-1;i++){
           temp=temp->next;
          
       }
       node *t=temp->next;
       temp->next=t->next;
       t->next=NULL;
       delete t;
    }
}
// searching
bool isPresent(node*head,int key){
  if(!head)
      return 0;
  while(head){
    
      if(head->data==key)
      return 1;
        head=head->next;
  }
  return 0;
}
// searching by rec 
bool isPresentRec(node*head,int key){
    if(head==NULL)
    return 0;
    if(head->data==key){
        return 1;
    }
    else{
        return isPresentRec(head->next,key);
    }
}
//reverse a ll 
void reverse(node*&head){
    if(head==NULL || head->next==NULL){
        return;
    }
    else{
        node*p=NULL;
        node*c=head;
        while(c!=NULL){
            node*n=c->next;
            c->next=p;
            p=c;/// update to traverse in whole ll
            c=n;
        }
        head=p;
    }
}
//finding mid without length
node*mid(node*head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    node*s=head;
    node*f=head->next;
while(f && f->next){// when f and f ka next hai (means null na hai) tab tak loop chalayenge
    s=s->next;
    f=f->next->next;
}
return s;
}
//bubble sort
void bubbleSort(node*&head){
    if(head==NULL || head->next==NULL){
        return;
    }
        for(int i=0;i<length(head)-1;i++){
            node*p=NULL;
            node*c=head;
            while(c && c->next){
                node*n=c->next;
                if(c->data > c->next->data){
                    if(p==NULL){
                                  //I am at head
                    c->next=n->next;
                    n->next=c;
                    p=head=n;
                    }
                    else{
                c->next=n->next;      //not on head
                n->next=c;
                p->next=n;
                p=n;
                    }
                }
                else{
                    p=c;
                    c=n;
                }
            }
      
    }
    
}

// find 5th element from end
node*fifth(node*head){
    node*s=head;
    node*f=head;// initially f was at head by traverse to the  fifth element
    for(int i=1;i<=5;i++){ //fifth element we will get
        f=f->next;
    }
    
    while(f!=NULL){
        f=f->next;
        s=s->next;
    }
    return s;
}
 //merging two sorted ll
 node*merge(node*h1,node*h2){
     if(h1==NULL){
         return h2; 
     }
     if(h2==NULL){
         return h1;
     }
     node*Nh=NULL;
     if(h1->data<h2->data){
         Nh=h1;
         Nh->next=merge(h1->next,h2);
     }
     else{
         Nh=h2;
         Nh->next=merge(h1,h2->next);
     }
     return Nh;
 }
int main() {
    node*head=NULL;
    node*tail=NULL;
// node a(1);
// node b(2);
// node c(3);
// node d(4);
// node*head=&a;
// a.next=&b;
// b.next=&c;
// c.next=&d;
// insertAtStart(head,tail,1);
// insertAtStart(head,tail,2);
// insertAtStart(head,tail,3);
// insertAtStart(head,tail,4);
// print(head);
// cout<<endl;
// cout<<endl;
// insertAtStart(head,tail,5);
// insertAtStart(head,tail,6);
// insertAtStart(head,tail,7);
// insertAtStart(head,tail,8);
// insertAtStart(head,tail,9);
// insertAtStart(head,tail,10);
// insertAtStart(head,tail,11);
// insertAtStart(head,tail,12);
//to insert at end
// insertAtend(head,tail,1);
// insertAtend(head,tail,2);
// insertAtend(head,tail,3);
// insertAtend(head,tail,4);
// print(head);
// cout<<endl;
// cout<<endl;
//for insertAtMiddle
insertAtend(head,tail,1);
insertAtend(head,tail,2);
insertAtend(head,tail,3);
insertAtend(head,tail,4);
insertAtend(head,tail,5);
insertAtend(head,tail,6);
insertAtend(head,tail,7);
insertAtend(head,tail,8);
insertAtend(head,tail,9);
insertAtend(head,tail,10);

print(head);
cout<<endl;
//insertAtMiddle(head,tail,8,2);
// print(head);
// cout<<endl;
// cout<<"length before delete :"<<length(head);
// cout<<endl;
//deleteAtStart
// deleteAtStart(head,tail);
// print(head);
// cout<<endl;
// cout<<"length after delete :"<<length(head);
// cout<<endl;
//deleteAtEnd
// deleteAtEnd(head,tail);
// print(head);
// cout<<endl;
// cout<<"length after delete :"<<length(head);
// cout<<endl;
// deleteAtMiddle(head,tail,3);
// print(head);
// cout<<endl;
// cout<<"length before delete :"<<length(head);
// cout<<endl;
// 1st way to print output
// cout<<head->data<<"-->"<<head->next->data<<"-->"<<head->next->next->data<<"-->"<<head->next->next->next->data<<"-->NULL";
// cout<<endl;
// 2 way to print output
// for(int i=0;i<4;i++){
//     cout<<head->data<<"-->";
//     head=head->next;
// }
//  cout<<"NULL";
// cout<<isPresent(head,8);//
// if(isPresentRec(head,5)){
//     cout<<"YES";
// }
// else{
//     cout<<"NO";
// }
//reverse
//reverse(head);
// print(head);
// node*m=mid(head);
// cout<<"mid element of ll is :"<<m->data;
// cout<<endl;
// cout<<"next element of mid of ll is :"<<m->next->data;
//bubble Sort
// bubbleSort(head);
// print(head);
// fith element
// node*s=fifth(head);
// cout<<s->data;
// merge two sorted ll 
node*head1=NULL;
node*head2=NULL;
// node*tail=NULL; i have already declare it above

insertAtend(head1,tail,1);
insertAtend(head1,tail,2);
insertAtend(head1,tail,3);
insertAtend(head1,tail,4);
insertAtend(head2,tail,1);
insertAtend(head2,tail,2);
insertAtend(head2,tail,3);
insertAtend(head2,tail,4);
node*n=merge(head1,head2);
cout<<"merge after sorting"<<endl;
print(n);
}
