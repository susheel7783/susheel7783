#include<bits/stdc++.h> 
using namespace std;
bool issafetoput(int board[][9],int i,int j,int n,int no){
	// col
	for(int k=0;k<n;k++){
		if(board[i][k]==no)
		return false;
	}
	//row
	for(int k=0;k<n;k++)
		if(board[k][j]==no)
		return false;
	//block 3x3
	int si=i-i%3;     //starting index row
	int sj=j-j%3;     //starting index col
	for(int k=si;k<si+sqrt(n);k++){
		for(int l=sj;l<sj+sqrt(n);l++){
			if(board[k][l]==no)
			return false;
		}
	}
	return true;
}
bool SudokuSolver(int board[][9],int i,int j,int n){
	//base case
	if(i==n){               ///then print
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				cout<<board[i][j]<<" ";
			}
			cout<<endl;
		}
		 return true;
	}
	if(j==n){
	   return SudokuSolver(board,i+1,0,n);// if j reaced at last then check for each col rec call
	}
	if(board[i][j]!=0){
		return SudokuSolver(board,i,j+1,n);
	}
	for(int num=1;num<=n;num++){
if(issafetoput(board,i,j,n,num)){
	board[i][j]=num;
	bool kyabakisolvehogaya=SudokuSolver(board,i,j+1,n);
	if(kyabakisolvehogaya){
		return true;
		
	}
	board[i][j]=0;
}
	}
	return false;
}
int main() {
	int n;
	cin>>n;
	int grid[9][9];
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin>>grid[i][j];
		}
	}
	SudokuSolver(grid,0,0,n);
}
