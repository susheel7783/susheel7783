// { Driver Code Starts
// Initial template for C++
Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:113
Explanation:Allocation can be done in 
following ways:{12} and {34, 67, 90} 
Maximum Pages = 191{12, 34} and {67, 90} 
Maximum Pages = 157{12, 34, 67} and {90} 
Maximum Pages =113. Therefore, the minimum 
of these cases is 113, which is selected 
as the output.

#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    bool isPossible(int a[],int n,int m,int min){
        int studentRequired=1,sum=0;
        for(int i=0;i<n;i++){
            if(a[i]>min){
                return false;
            }
            if(sum+a[i]>min){
                studentRequired++;
                sum=a[i];
                if(studentRequired>m){
                    return false;
                }
            }
            else{
                sum+=a[i];
            }
        }
        return true;
    }
    //Function to find minimum number of pages.
    int findPages(int a[], int n, int m) 
    {
        //code here
        int sum=0;
        if(n<m){
            return -1;
        }
        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        int  start=0;
        int end=sum,ans=INT_MAX;
        while(start<=end){
            int mid=(start+end)/2;
            if(isPossible(a,n,m,mid)){
                ans=min(ans,mid);
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}
  // } Driver Code Ends
